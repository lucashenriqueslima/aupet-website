/*
 *       Developed by Justin Mead
 *       Â©2011 MeadMiracle
 *		www.meadmiracle.com / meadmiracle@gmail.com
 *       Version 1.3
 *       Testing: IE8/Windows XP
 *                Firefox/Windows XP
 *                Chrome/Windows XP
 *       Licensed under the Creative Commons GPL http://creativecommons.org/licenses/GPL/2.0/
 */

(function ($) {
    var settings = new Array();
    var group1 = new Array();
    var group2 = new Array();
    var onSort = new Array();
    $.configureBoxes = function (options) {
        var index = settings.push({box1View: 'box1View', box1Storage: 'box1Storage', box1Filter: 'box1Filter', box1Clear: 'box1Clear', box1Counter: 'box1Counter', box2View: 'box2View', box2Storage: 'box2Storage', box2Filter: 'box2Filter', box2Clear: 'box2Clear', box2Counter: 'box2Counter', to1: 'to1', allTo1: 'allTo1', to2: 'to2', allTo2: 'allTo2', transferMode: 'move', sortBy: 'text', useFilters: true, useCounters: true, useSorting: true, selectOnSubmit: true});
        index--;
        $.extend(settings[index], options);
        group1.push({view: settings[index].box1View, storage: settings[index].box1Storage, filter: settings[index].box1Filter, clear: settings[index].box1Clear, counter: settings[index].box1Counter, index: index});
        group2.push({view: settings[index].box2View, storage: settings[index].box2Storage, filter: settings[index].box2Filter, clear: settings[index].box2Clear, counter: settings[index].box2Counter, index: index});
        if (settings[index].sortBy == 'text') {
            onSort.push(function (a, b) {
                var aVal = a.text.toLowerCase();
                var bVal = b.text.toLowerCase();
                if (aVal < bVal) {
                    return -1;
                }
                if (aVal > bVal) {
                    return 1;
                }
                return 0;
            });
        } else {
            onSort.push(function (a, b) {
                var aVal = a.value.toLowerCase();
                var bVal = b.value.toLowerCase();
                if (aVal < bVal) {
                    return -1;
                }
                if (aVal > bVal) {
                    return 1;
                }
                return 0;
            });
        }
        if (settings[index].useFilters) {
            $('#' + group1[index].filter).keyup(function () {
                Filter(group1[index]);
            });
            $('#' + group2[index].filter).keyup(function () {
                Filter(group2[index]);
            });
            $('#' + group1[index].clear).click(function () {
                ClearFilter(group1[index]);
            });
            $('#' + group2[index].clear).click(function () {
                ClearFilter(group2[index]);
            });
        }
        if (IsMoveMode(settings[index])) {
            $('#' + group2[index].view).dblclick(function () {
                MoveSelected(group2[index], group1[index]);
            });
            $('#' + settings[index].to1).click(function () {
                MoveSelected(group2[index], group1[index]);
            });
            $('#' + settings[index].allTo1).click(function () {
                MoveAll(group2[index], group1[index]);
            });
        } else {
            $('#' + group2[index].view).dblclick(function () {
                RemoveSelected(group2[index], group1[index]);
            });
            $('#' + settings[index].to1).click(function () {
                RemoveSelected(group2[index], group1[index]);
            });
            $('#' + settings[index].allTo1).click(function () {
                RemoveAll(group2[index], group1[index]);
            });
        }
        $('#' + group1[index].view).dblclick(function () {
            MoveSelected(group1[index], group2[index]);
        });
        $('#' + settings[index].to2).click(function () {
            MoveSelected(group1[index], group2[index]);
        });
        $('#' + settings[index].allTo2).click(function () {
            MoveAll(group1[index], group2[index]);
        });
        if (settings[index].useCounters) {
            UpdateLabel(group1[index]);
            UpdateLabel(group2[index]);
        }
        if (settings[index].useSorting) {
            SortOptions(group1[index]);
            SortOptions(group2[index]);
        }
        $('#' + group1[index].storage + ',#' + group2[index].storage).css('display', 'none');
        if (settings[index].selectOnSubmit) {
            $('#' + settings[index].box2View).closest('form').submit(function () {
                $('#' + settings[index].box2View).children('option').attr('selected', 'selected');
            });
        }
    };
    function UpdateLabel(group) {
        var showingCount = $("#" + group.view + " option").size();
        var hiddenCount = $("#" + group.storage + " option").size();
        $("#" + group.counter).text('Mostrando ' + showingCount + ' de ' + (showingCount + hiddenCount));
    }
    function Filter(group) {
        var index = group.index;
        var filterLower;
        if (settings[index].useFilters) {
            filterLower = $('#' + group.filter).val().toString().toLowerCase();
        } else {
            filterLower = '';
        }
        $('#' + group.view + ' option').filter(function (i) {
            var toMatch = $(this).text().toString().toLowerCase();
            return toMatch.indexOf(filterLower) == -1;
        }).appendTo('#' + group.storage);
        $('#' + group.storage + ' option').filter(function (i) {
            var toMatch = $(this).text().toString().toLowerCase();
            return toMatch.indexOf(filterLower) != -1;
        }).appendTo('#' + group.view);
        try {
            $('#' + group.view + ' option').removeAttr('selected');
        } catch (ex) {
        }
        if (settings[index].useSorting) {
            SortOptions(group);
        }
        if (settings[index].useCounters) {
            UpdateLabel(group);
        }
    }
    function SortOptions(group) {
        var $toSortOptions = $('#' + group.view + ' option');
        $toSortOptions.sort(onSort[group.index]);
        $('#' + group.view).empty().append($toSortOptions);
    }
    function MoveSelected(fromGroup, toGroup) {
        if (IsMoveMode(settings[fromGroup.index])) {
            $('#' + fromGroup.view + ' option:selected').appendTo('#' + toGroup.view);
        } else {
            $('#' + fromGroup.view + ' option:selected:not([class*=copiedOption])').clone().appendTo('#' + toGroup.view).end().end().addClass('copiedOption');
        }
        try {
            $('#' + fromGroup.view + ' option,#' + toGroup.view + ' option').removeAttr('selected');
        } catch (ex) {
        }
        Filter(toGroup);
        if (settings[fromGroup.index].useCounters) {
            UpdateLabel(fromGroup);
        }
    }
    function MoveAll(fromGroup, toGroup) {
        if (IsMoveMode(settings[fromGroup.index])) {
            $('#' + fromGroup.view + ' option').appendTo('#' + toGroup.view);
        } else {
            $('#' + fromGroup.view + ' option:not([class*=copiedOption])').clone().appendTo('#' + toGroup.view).end().end().addClass('copiedOption');
        }
        try {
            $('#' + fromGroup.view + ' option,#' + toGroup.view + ' option').removeAttr('selected');
        } catch (ex) {
        }
        Filter(toGroup);
        if (settings[fromGroup.index].useCounters) {
            UpdateLabel(fromGroup);
        }
    }
    function RemoveSelected(removeGroup, otherGroup) {
        $('#' + otherGroup.view + ' option.copiedOption').add('#' + otherGroup.storage + ' option.copiedOption').remove();
        try {
            $('#' + removeGroup.view + ' option:selected').appendTo('#' + otherGroup.view).removeAttr('selected');
        } catch (ex) {
        }
        $('#' + removeGroup.view + ' option').add('#' + removeGroup.storage + ' option').clone().addClass('copiedOption').appendTo('#' + otherGroup.view);
        Filter(otherGroup);
        if (settings[removeGroup.index].useCounters) {
            UpdateLabel(removeGroup);
        }
    }
    function RemoveAll(removeGroup, otherGroup) {
        $('#' + otherGroup.view + ' option.copiedOption').add('#' + otherGroup.storage + ' option.copiedOption').remove();
        try {
            $('#' + removeGroup.storage + ' option').clone().addClass('copiedOption').add('#' + removeGroup.view + ' option').appendTo('#' + otherGroup.view).removeAttr('selected');
        } catch (ex) {
        }
        Filter(otherGroup);
        if (settings[removeGroup.index].useCounters) {
            UpdateLabel(removeGroup);
        }
    }
    function ClearFilter(group) {
        $('#' + group.filter).val('');
        $('#' + group.storage + ' option').appendTo('#' + group.view);
        try {
            $('#' + group.view + ' option').removeAttr('selected');
        } catch (ex) {
        }
        if (settings[group.index].useSorting) {
            SortOptions(group);
        }
        if (settings[group.index].useCounters) {
            UpdateLabel(group);
        }
    }
    function IsMoveMode(currSettings) {
        return currSettings.transferMode == 'move';
    }
})(jQuery);


// criei esse novo script abaixo para usar dois combos na mesma pagina
(function ($) {
    var settings1 = new Array();
    var group3 = new Array();
    var group4 = new Array();
    var onSort1 = new Array();
    $.configureBoxes1 = function (options) {
        var index = settings1.push({box3View: 'box3View', box3Storage: 'box3Storage', box3Filter: 'box3Filter', box3Clear: 'box3Clear', box3Counter: 'box3Counter', box4View: 'box4View', box4Storage: 'box4Storage', box4Filter: 'box4Filter', box4Clear: 'box4Clear', box4Counter: 'box4Counter', to3: 'to3', allTo3: 'allTo3', to4: 'to4', allTo4: 'allTo4', transferMode: 'move', sortBy: 'text', useFilters: true, useCounters: true, useSorting: true, selectOnSubmit: true});
        index--;
        $.extend(settings1[index], options);
        group3.push({view: settings1[index].box3View, storage: settings1[index].box3Storage, filter: settings1[index].box3Filter, clear: settings1[index].box3Clear, counter: settings1[index].box3Counter, index: index});
        group4.push({view: settings1[index].box4View, storage: settings1[index].box4Storage, filter: settings1[index].box4Filter, clear: settings1[index].box4Clear, counter: settings1[index].box4Counter, index: index});
        if (settings1[index].sortBy == 'text') {
            onSort1.push(function (a, b) {
                var aVal = a.text.toLowerCase();
                var bVal = b.text.toLowerCase();
                if (aVal < bVal) {
                    return -1;
                }
                if (aVal > bVal) {
                    return 1;
                }
                return 0;
            });
        } else {
            onSort1.push(function (a, b) {
                var aVal = a.value.toLowerCase();
                var bVal = b.value.toLowerCase();
                if (aVal < bVal) {
                    return -1;
                }
                if (aVal > bVal) {
                    return 1;
                }
                return 0;
            });
        }
        if (settings1[index].useFilters) {
            $('#' + group3[index].filter).keyup(function () {
                Filter(group3[index]);
            });
            $('#' + group4[index].filter).keyup(function () {
                Filter(group4[index]);
            });
            $('#' + group3[index].clear).click(function () {
                ClearFilter(group3[index]);
            });
            $('#' + group4[index].clear).click(function () {
                ClearFilter(group4[index]);
            });
        }
        if (IsMoveMode(settings1[index])) {
            $('#' + group4[index].view).dblclick(function () {
                MoveSelected(group4[index], group3[index]);
            });
            $('#' + settings1[index].to3).click(function () {
                MoveSelected(group4[index], group3[index]);
            });
            $('#' + settings1[index].allTo3).click(function () {
                MoveAll(group4[index], group3[index]);
            });
        } else {
            $('#' + group4[index].view).dblclick(function () {
                RemoveSelected(group4[index], group3[index]);
            });
            $('#' + settings1[index].to3).click(function () {
                RemoveSelected(group4[index], group3[index]);
            });
            $('#' + settings1[index].allTo3).click(function () {
                RemoveAll(group4[index], group3[index]);
            });
        }
        $('#' + group3[index].view).dblclick(function () {
            MoveSelected(group3[index], group4[index]);
        });
        $('#' + settings1[index].to4).click(function () {
            MoveSelected(group3[index], group4[index]);
        });
        $('#' + settings1[index].allTo4).click(function () {
            MoveAll(group3[index], group4[index]);
        });
        if (settings1[index].useCounters) {
            UpdateLabel(group3[index]);
            UpdateLabel(group4[index]);
        }
        if (settings1[index].useSorting) {
            SortOptions(group3[index]);
            SortOptions(group4[index]);
        }
        $('#' + group3[index].storage + ',#' + group4[index].storage).css('display', 'none');
        if (settings1[index].selectOnSubmit) {
            $('#' + settings1[index].box4View).closest('form').submit(function () {
                $('#' + settings1[index].box4View).children('option').attr('selected', 'selected');
            });
        }
    };
    function UpdateLabel(group) {
        var showingCount = $("#" + group.view + " option").size();
        var hiddenCount = $("#" + group.storage + " option").size();
        $("#" + group.counter).text('Mostrando ' + showingCount + ' de ' + (showingCount + hiddenCount));
    }
    function Filter(group) {
        var index = group.index;
        var filterLower;
        if (settings1[index].useFilters) {
            filterLower = $('#' + group.filter).val().toString().toLowerCase();
        } else {
            filterLower = '';
        }
        $('#' + group.view + ' option').filter(function (i) {
            var toMatch = $(this).text().toString().toLowerCase();
            return toMatch.indexOf(filterLower) == -1;
        }).appendTo('#' + group.storage);
        $('#' + group.storage + ' option').filter(function (i) {
            var toMatch = $(this).text().toString().toLowerCase();
            return toMatch.indexOf(filterLower) != -1;
        }).appendTo('#' + group.view);
        try {
            $('#' + group.view + ' option').removeAttr('selected');
        } catch (ex) {
        }
        if (settings1[index].useSorting) {
            SortOptions(group);
        }
        if (settings1[index].useCounters) {
            UpdateLabel(group);
        }
    }
    function SortOptions(group) {
        var $toSortOptions = $('#' + group.view + ' option');
        $toSortOptions.sort(onSort1[group.index]);
        $('#' + group.view).empty().append($toSortOptions);
    }
    function MoveSelected(fromGroup, toGroup) {
        if (IsMoveMode(settings1[fromGroup.index])) {
            $('#' + fromGroup.view + ' option:selected').appendTo('#' + toGroup.view);
        } else {
            $('#' + fromGroup.view + ' option:selected:not([class*=copiedOption])').clone().appendTo('#' + toGroup.view).end().end().addClass('copiedOption');
        }
        try {
            $('#' + fromGroup.view + ' option,#' + toGroup.view + ' option').removeAttr('selected');
        } catch (ex) {
        }
        Filter(toGroup);
        if (settings1[fromGroup.index].useCounters) {
            UpdateLabel(fromGroup);
        }
    }
    function MoveAll(fromGroup, toGroup) {
        if (IsMoveMode(settings1[fromGroup.index])) {
            $('#' + fromGroup.view + ' option').appendTo('#' + toGroup.view);
        } else {
            $('#' + fromGroup.view + ' option:not([class*=copiedOption])').clone().appendTo('#' + toGroup.view).end().end().addClass('copiedOption');
        }
        try {
            $('#' + fromGroup.view + ' option,#' + toGroup.view + ' option').removeAttr('selected');
        } catch (ex) {
        }
        Filter(toGroup);
        if (settings1[fromGroup.index].useCounters) {
            UpdateLabel(fromGroup);
        }
    }
    function RemoveSelected(removeGroup, otherGroup) {
        $('#' + otherGroup.view + ' option.copiedOption').add('#' + otherGroup.storage + ' option.copiedOption').remove();
        try {
            $('#' + removeGroup.view + ' option:selected').appendTo('#' + otherGroup.view).removeAttr('selected');
        } catch (ex) {
        }
        $('#' + removeGroup.view + ' option').add('#' + removeGroup.storage + ' option').clone().addClass('copiedOption').appendTo('#' + otherGroup.view);
        Filter(otherGroup);
        if (settings1[removeGroup.index].useCounters) {
            UpdateLabel(removeGroup);
        }
    }
    function RemoveAll(removeGroup, otherGroup) {
        $('#' + otherGroup.view + ' option.copiedOption').add('#' + otherGroup.storage + ' option.copiedOption').remove();
        try {
            $('#' + removeGroup.storage + ' option').clone().addClass('copiedOption').add('#' + removeGroup.view + ' option').appendTo('#' + otherGroup.view).removeAttr('selected');
        } catch (ex) {
        }
        Filter(otherGroup);
        if (settings1[removeGroup.index].useCounters) {
            UpdateLabel(removeGroup);
        }
    }
    function ClearFilter(group) {
        $('#' + group.filter).val('');
        $('#' + group.storage + ' option').appendTo('#' + group.view);
        try {
            $('#' + group.view + ' option').removeAttr('selected');
        } catch (ex) {
        }
        if (settings1[group.index].useSorting) {
            SortOptions(group);
        }
        if (settings1[group.index].useCounters) {
            UpdateLabel(group);
        }
    }
    function IsMoveMode(currSettings) {
        return currSettings.transferMode == 'move';
    }
})(jQuery);


// criei esse novo script abaixo para usar trÃªs combos na mesma pagina
(function ($) {
    var settings2 = new Array();
    var group5 = new Array();
    var group6 = new Array();
    var onSort2 = new Array();
    $.configureBoxes2 = function (options) {
        var index = settings2.push({box5View: 'box5View', box5Storage: 'box5Storage', box5Filter: 'box5Filter', box5Clear: 'box5Clear', box5Counter: 'box5Counter', box6View: 'box6View', box6Storage: 'box6Storage', box6Filter: 'box6Filter', box6Clear: 'box6Clear', box6Counter: 'box6Counter', to5: 'to5', allTo5: 'allTo5', to6: 'to6', allTo6: 'allTo6', transferMode: 'move', sortBy: 'text', useFilters: true, useCounters: true, useSorting: true, selectOnSubmit: true});
        index--;
        $.extend(settings2[index], options);
        group5.push({view: settings2[index].box5View, storage: settings2[index].box5Storage, filter: settings2[index].box5Filter, clear: settings2[index].box5Clear, counter: settings2[index].box5Counter, index: index});
        group6.push({view: settings2[index].box6View, storage: settings2[index].box6Storage, filter: settings2[index].box6Filter, clear: settings2[index].box6Clear, counter: settings2[index].box6Counter, index: index});
        if (settings2[index].sortBy == 'text') {
            onSort2.push(function (a, b) {
                var aVal = a.text.toLowerCase();
                var bVal = b.text.toLowerCase();
                if (aVal < bVal) {
                    return -1;
                }
                if (aVal > bVal) {
                    return 1;
                }
                return 0;
            });
        } else {
            onSort2.push(function (a, b) {
                var aVal = a.value.toLowerCase();
                var bVal = b.value.toLowerCase();
                if (aVal < bVal) {
                    return -1;
                }
                if (aVal > bVal) {
                    return 1;
                }
                return 0;
            });
        }
        if (settings2[index].useFilters) {
            $('#' + group5[index].filter).keyup(function () {
                Filter(group5[index]);
            });
            $('#' + group6[index].filter).keyup(function () {
                Filter(group6[index]);
            });
            $('#' + group5[index].clear).click(function () {
                ClearFilter(group5[index]);
            });
            $('#' + group6[index].clear).click(function () {
                ClearFilter(group6[index]);
            });
        }
        if (IsMoveMode(settings2[index])) {
            $('#' + group6[index].view).dblclick(function () {
                MoveSelected(group6[index], group5[index]);
            });
            $('#' + settings2[index].to5).click(function () {
                MoveSelected(group6[index], group5[index]);
            });
            $('#' + settings2[index].allTo5).click(function () {
                MoveAll(group6[index], group5[index]);
            });
        } else {
            $('#' + group6[index].view).dblclick(function () {
                RemoveSelected(group6[index], group5[index]);
            });
            $('#' + settings2[index].to5).click(function () {
                RemoveSelected(group6[index], group5[index]);
            });
            $('#' + settings2[index].allTo5).click(function () {
                RemoveAll(group6[index], group5[index]);
            });
        }
        $('#' + group5[index].view).dblclick(function () {
            MoveSelected(group5[index], group6[index]);
        });
        $('#' + settings2[index].to6).click(function () {
            MoveSelected(group5[index], group6[index]);
        });
        $('#' + settings2[index].allTo6).click(function () {
            MoveAll(group5[index], group6[index]);
        });
        if (settings2[index].useCounters) {
            UpdateLabel(group5[index]);
            UpdateLabel(group6[index]);
        }
        if (settings2[index].useSorting) {
            SortOptions(group5[index]);
            SortOptions(group6[index]);
        }
        $('#' + group5[index].storage + ',#' + group6[index].storage).css('display', 'none');
        if (settings2[index].selectOnSubmit) {
            $('#' + settings2[index].box6View).closest('form').submit(function () {
                $('#' + settings2[index].box6View).children('option').attr('selected', 'selected');
            });
        }
    };
    function UpdateLabel(group) {
        var showingCount = $("#" + group.view + " option").size();
        var hiddenCount = $("#" + group.storage + " option").size();
        $("#" + group.counter).text('Mostrando ' + showingCount + ' de ' + (showingCount + hiddenCount));
    }
    function Filter(group) {
        var index = group.index;
        var filterLower;
        if (settings2[index].useFilters) {
            filterLower = $('#' + group.filter).val().toString().toLowerCase();
        } else {
            filterLower = '';
        }
        $('#' + group.view + ' option').filter(function (i) {
            var toMatch = $(this).text().toString().toLowerCase();
            return toMatch.indexOf(filterLower) == -1;
        }).appendTo('#' + group.storage);
        $('#' + group.storage + ' option').filter(function (i) {
            var toMatch = $(this).text().toString().toLowerCase();
            return toMatch.indexOf(filterLower) != -1;
        }).appendTo('#' + group.view);
        try {
            $('#' + group.view + ' option').removeAttr('selected');
        } catch (ex) {
        }
        if (settings2[index].useSorting) {
            SortOptions(group);
        }
        if (settings2[index].useCounters) {
            UpdateLabel(group);
        }
    }
    function SortOptions(group) {
        var $toSortOptions = $('#' + group.view + ' option');
        $toSortOptions.sort(onSort2[group.index]);
        $('#' + group.view).empty().append($toSortOptions);
    }
    function MoveSelected(fromGroup, toGroup) {
        if (IsMoveMode(settings2[fromGroup.index])) {
            $('#' + fromGroup.view + ' option:selected').appendTo('#' + toGroup.view);
        } else {
            $('#' + fromGroup.view + ' option:selected:not([class*=copiedOption])').clone().appendTo('#' + toGroup.view).end().end().addClass('copiedOption');
        }
        try {
            $('#' + fromGroup.view + ' option,#' + toGroup.view + ' option').removeAttr('selected');
        } catch (ex) {
        }
        Filter(toGroup);
        if (settings2[fromGroup.index].useCounters) {
            UpdateLabel(fromGroup);
        }
    }
    function MoveAll(fromGroup, toGroup) {
        if (IsMoveMode(settings2[fromGroup.index])) {
            $('#' + fromGroup.view + ' option').appendTo('#' + toGroup.view);
        } else {
            $('#' + fromGroup.view + ' option:not([class*=copiedOption])').clone().appendTo('#' + toGroup.view).end().end().addClass('copiedOption');
        }
        try {
            $('#' + fromGroup.view + ' option,#' + toGroup.view + ' option').removeAttr('selected');
        } catch (ex) {
        }
        Filter(toGroup);
        if (settings2[fromGroup.index].useCounters) {
            UpdateLabel(fromGroup);
        }
    }
    function RemoveSelected(removeGroup, otherGroup) {
        $('#' + otherGroup.view + ' option.copiedOption').add('#' + otherGroup.storage + ' option.copiedOption').remove();
        try {
            $('#' + removeGroup.view + ' option:selected').appendTo('#' + otherGroup.view).removeAttr('selected');
        } catch (ex) {
        }
        $('#' + removeGroup.view + ' option').add('#' + removeGroup.storage + ' option').clone().addClass('copiedOption').appendTo('#' + otherGroup.view);
        Filter(otherGroup);
        if (settings2[removeGroup.index].useCounters) {
            UpdateLabel(removeGroup);
        }
    }
    function RemoveAll(removeGroup, otherGroup) {
        $('#' + otherGroup.view + ' option.copiedOption').add('#' + otherGroup.storage + ' option.copiedOption').remove();
        try {
            $('#' + removeGroup.storage + ' option').clone().addClass('copiedOption').add('#' + removeGroup.view + ' option').appendTo('#' + otherGroup.view).removeAttr('selected');
        } catch (ex) {
        }
        Filter(otherGroup);
        if (settings2[removeGroup.index].useCounters) {
            UpdateLabel(removeGroup);
        }
    }
    function ClearFilter(group) {
        $('#' + group.filter).val('');
        $('#' + group.storage + ' option').appendTo('#' + group.view);
        try {
            $('#' + group.view + ' option').removeAttr('selected');
        } catch (ex) {
        }
        if (settings2[group.index].useSorting) {
            SortOptions(group);
        }
        if (settings2[group.index].useCounters) {
            UpdateLabel(group);
        }
    }
    function IsMoveMode(currSettings) {
        return currSettings.transferMode == 'move';
    }
})(jQuery);

// criei esse novo script abaixo para usar quatro combos na mesma pagina
(function ($) {
    var settings3 = new Array();
    var group6 = new Array();
    var group7 = new Array();
    var onSort3 = new Array();
    $.configureBoxes3 = function (options) {
        var index = settings3.push({box7View: 'box7View', box7Storage: 'box7Storage', box7Filter: 'box7Filter', box7Clear: 'box7Clear', box7Counter: 'box7Counter', box8View: 'box8View', box8Storage: 'box8Storage', box8Filter: 'box8Filter', box8Clear: 'box8Clear', box8Counter: 'box8Counter', to7: 'to7', allTo7: 'allTo7', to8: 'to8', allTo8: 'allTo8', transferMode: 'move', sortBy: 'text', useFilters: true, useCounters: true, useSorting: true, selectOnSubmit: true});
        index--;
        $.extend(settings3[index], options);
        group6.push({view: settings3[index].box7View, storage: settings3[index].box7Storage, filter: settings3[index].box7Filter, clear: settings3[index].box7Clear, counter: settings3[index].box7Counter, index: index});
        group7.push({view: settings3[index].box8View, storage: settings3[index].box8Storage, filter: settings3[index].box8Filter, clear: settings3[index].box8Clear, counter: settings3[index].box8Counter, index: index});
        if (settings3[index].sortBy == 'text') {
            onSort3.push(function (a, b) {
                var aVal = a.text.toLowerCase();
                var bVal = b.text.toLowerCase();
                if (aVal < bVal) {
                    return -1;
                }
                if (aVal > bVal) {
                    return 1;
                }
                return 0;
            });
        } else {
            onSort3.push(function (a, b) {
                var aVal = a.value.toLowerCase();
                var bVal = b.value.toLowerCase();
                if (aVal < bVal) {
                    return -1;
                }
                if (aVal > bVal) {
                    return 1;
                }
                return 0;
            });
        }
        if (settings3[index].useFilters) {
            $('#' + group6[index].filter).keyup(function () {
                Filter(group6[index]);
            });
            $('#' + group7[index].filter).keyup(function () {
                Filter(group7[index]);
            });
            $('#' + group6[index].clear).click(function () {
                ClearFilter(group6[index]);
            });
            $('#' + group7[index].clear).click(function () {
                ClearFilter(group7[index]);
            });
        }
        if (IsMoveMode(settings3[index])) {
            $('#' + group7[index].view).dblclick(function () {
                MoveSelected(group7[index], group6[index]);
            });
            $('#' + settings3[index].to7).click(function () {
                MoveSelected(group7[index], group6[index]);
            });
            $('#' + settings3[index].allTo7).click(function () {
                MoveAll(group7[index], group6[index]);
            });
        } else {
            $('#' + group7[index].view).dblclick(function () {
                RemoveSelected(group7[index], group6[index]);
            });
            $('#' + settings3[index].to7).click(function () {
                RemoveSelected(group7[index], group6[index]);
            });
            $('#' + settings3[index].allTo7).click(function () {
                RemoveAll(group7[index], group6[index]);
            });
        }
        $('#' + group6[index].view).dblclick(function () {
            MoveSelected(group6[index], group7[index]);
        });
        $('#' + settings3[index].to8).click(function () {
            MoveSelected(group6[index], group7[index]);
        });
        $('#' + settings3[index].allTo8).click(function () {
            MoveAll(group6[index], group7[index]);
        });
        if (settings3[index].useCounters) {
            UpdateLabel(group6[index]);
            UpdateLabel(group7[index]);
        }
        if (settings3[index].useSorting) {
            SortOptions(group6[index]);
            SortOptions(group7[index]);
        }
        $('#' + group6[index].storage + ',#' + group7[index].storage).css('display', 'none');
        if (settings3[index].selectOnSubmit) {
            $('#' + settings3[index].box8View).closest('form').submit(function () {
                $('#' + settings3[index].box8View).children('option').attr('selected', 'selected');
            });
        }
    };
    function UpdateLabel(group) {
        var showingCount = $("#" + group.view + " option").size();
        var hiddenCount = $("#" + group.storage + " option").size();
        $("#" + group.counter).text('Mostrando ' + showingCount + ' de ' + (showingCount + hiddenCount));
    }
    function Filter(group) {
        var index = group.index;
        var filterLower;
        if (settings3[index].useFilters) {
            filterLower = $('#' + group.filter).val().toString().toLowerCase();
        } else {
            filterLower = '';
        }
        $('#' + group.view + ' option').filter(function (i) {
            var toMatch = $(this).text().toString().toLowerCase();
            return toMatch.indexOf(filterLower) == -1;
        }).appendTo('#' + group.storage);
        $('#' + group.storage + ' option').filter(function (i) {
            var toMatch = $(this).text().toString().toLowerCase();
            return toMatch.indexOf(filterLower) != -1;
        }).appendTo('#' + group.view);
        try {
            $('#' + group.view + ' option').removeAttr('selected');
        } catch (ex) {
        }
        if (settings3[index].useSorting) {
            SortOptions(group);
        }
        if (settings3[index].useCounters) {
            UpdateLabel(group);
        }
    }
    function SortOptions(group) {
        var $toSortOptions = $('#' + group.view + ' option');
        $toSortOptions.sort(onSort3[group.index]);
        $('#' + group.view).empty().append($toSortOptions);
    }
    function MoveSelected(fromGroup, toGroup) {
        if (IsMoveMode(settings3[fromGroup.index])) {
            $('#' + fromGroup.view + ' option:selected').appendTo('#' + toGroup.view);
        } else {
            $('#' + fromGroup.view + ' option:selected:not([class*=copiedOption])').clone().appendTo('#' + toGroup.view).end().end().addClass('copiedOption');
        }
        try {
            $('#' + fromGroup.view + ' option,#' + toGroup.view + ' option').removeAttr('selected');
        } catch (ex) {
        }
        Filter(toGroup);
        if (settings3[fromGroup.index].useCounters) {
            UpdateLabel(fromGroup);
        }
    }
    function MoveAll(fromGroup, toGroup) {
        if (IsMoveMode(settings3[fromGroup.index])) {
            $('#' + fromGroup.view + ' option').appendTo('#' + toGroup.view);
        } else {
            $('#' + fromGroup.view + ' option:not([class*=copiedOption])').clone().appendTo('#' + toGroup.view).end().end().addClass('copiedOption');
        }
        try {
            $('#' + fromGroup.view + ' option,#' + toGroup.view + ' option').removeAttr('selected');
        } catch (ex) {
        }
        Filter(toGroup);
        if (settings3[fromGroup.index].useCounters) {
            UpdateLabel(fromGroup);
        }
    }
    function RemoveSelected(removeGroup, otherGroup) {
        $('#' + otherGroup.view + ' option.copiedOption').add('#' + otherGroup.storage + ' option.copiedOption').remove();
        try {
            $('#' + removeGroup.view + ' option:selected').appendTo('#' + otherGroup.view).removeAttr('selected');
        } catch (ex) {
        }
        $('#' + removeGroup.view + ' option').add('#' + removeGroup.storage + ' option').clone().addClass('copiedOption').appendTo('#' + otherGroup.view);
        Filter(otherGroup);
        if (settings3[removeGroup.index].useCounters) {
            UpdateLabel(removeGroup);
        }
    }
    function RemoveAll(removeGroup, otherGroup) {
        $('#' + otherGroup.view + ' option.copiedOption').add('#' + otherGroup.storage + ' option.copiedOption').remove();
        try {
            $('#' + removeGroup.storage + ' option').clone().addClass('copiedOption').add('#' + removeGroup.view + ' option').appendTo('#' + otherGroup.view).removeAttr('selected');
        } catch (ex) {
        }
        Filter(otherGroup);
        if (settings3[removeGroup.index].useCounters) {
            UpdateLabel(removeGroup);
        }
    }
    function ClearFilter(group) {
        $('#' + group.filter).val('');
        $('#' + group.storage + ' option').appendTo('#' + group.view);
        try {
            $('#' + group.view + ' option').removeAttr('selected');
        } catch (ex) {
        }
        if (settings3[group.index].useSorting) {
            SortOptions(group);
        }
        if (settings3[group.index].useCounters) {
            UpdateLabel(group);
        }
    }
    function IsMoveMode(currSettings) {
        return currSettings.transferMode == 'move';
    }
})(jQuery);

